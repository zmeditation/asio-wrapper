
namespace st_asio_wrapper
{

只支持一条连接的客户端（或者说一个套接字），tcp和udp通用
template<typename Socket>
class st_sclient : public st_service_pump::i_service, public Socket
{
public:
	st_sclient(st_service_pump& service_pump_);

protected:
	virtual void init();
	virtual void uninit();
实现i_service的纯虚接口，供st_service_pump使用（start_service时调用init，stop_service时调用uninit），这两个接口其实
就是实现了开始和结束逻辑，开始意味着什么由Socket决定，这个我们在前面讲st_socket、st_tcp_socket、st_udp_socket、
st_connector和st_server_socket的时候，已经说过多次了。
};

支持多条连接的客户端（或者说多个套接字），tcp和udp通用，其实它更像一个容器，只是在st_object_pool上扩展了一些helper函数
template<typename Socket, typename Pool>
class st_client : public Pool
{
protected:
	st_client(st_service_pump& service_pump_);

	template<typename Arg>
	st_client(st_service_pump& service_pump_, Arg arg);
后者由ssl使用。

	virtual void init();
实现i_service的纯虚接口，供st_service_pump使用（start_service时调用），跟st_sclient::init功能一样，只是对所有客户端都
做一个“开始”操作。

public:
	bool add_client(typename st_client::object_ctype& client_ptr, bool reset = true);
添加一个连接到对象池，并调用client_ptr->start()，如果reset为true，那么在这之前还会先调用client_ptr->reset。
};

} //namespace

