
#ifdef HUGE_MSG
#define HEAD_TYPE	uint32_t
#define HEAD_H2N	htonl
#else
#define HEAD_TYPE	uint16_t
#define HEAD_H2N	htons
#endif
#define HEAD_LEN	(sizeof(HEAD_TYPE))

namespace st_asio_wrapper
{

打包器的helper类，目前只有一个方法，就是判断要打包的消息，在打包后，是否超过了最大长度
class packer_helper
{
public:
	static size_t msg_size_check(size_t pre_len, const char* const pstr[], const size_t len[], size_t num);
}

打包器接口
template<typename MsgType>
class i_packer
{
public:
	typedef MsgType msg_type;
	typedef const msg_type msg_ctype;

protected:
	virtual ~i_packer();

public:
	virtual void reset_state();
	virtual MsgType pack_msg(const char* const pstr[], const size_t len[], size_t num, bool native = false) = 0;
打包函数，如果使用者调用send_msg, broadcast_msg, post_msg，则会以native为false调用本函数；
如果使用都调用send_native_msg, broadcast_native_msg, post_native_msg，则会以native为true调用本函数。

	virtual char* raw_data(msg_type& msg) const;
	virtual const char* raw_data(msg_ctype& msg) const;
	virtual size_t raw_data_len(msg_ctype& msg) const;
从一个打包器对象中，得到原始数据。

	msg_type pack_msg(const char* pstr, size_t len, bool native = false) {return pack_msg(&pstr, &len, 1, native);}
	msg_type pack_msg(const std::string& str, bool native = false) {return pack_msg(str.data(), str.size(), native);}
两个重载体，增加接口灵活性。
};

默认的打包器，如果你需要的消息格式与默认打包器的消息格式不相同，那么显然的，你需要实现自己的打包器；
默认打包器的消息格式是：长度（２字节）＋　消息内容，所以其支持的消息长度为1至(65535-2)，如果想突破这个限制，
可以定义HUGE_MSG宏，那么可以支持到4G长度。
注意，大消息会占用你相像不到的大内存，比如你的消息长度为1M（看起来不算大），那么由于每个st_tcp_socket都有一个解包器，
每个解包器都必须有一个至少1M大小的接收缓存，那么1024个st_tcp_socket，光是解包器缓存就占用1G内存，再考虑默认的接收发送缓存
分别可最大存放1024个消息，那么每个st_tcp_socket在接收发送缓存都满的情况下，可占用2 * 1024 * 1M = 2G内存，那么1024个st_tcp_socket
就将占用2T内存。所以推荐的作法是，如果你的消息很长，那么一定要尽量减小接收发送缓存的长度，比如设置为1个消息。
class packer : public i_packer<std::string>;

当你想在运行时替换打包器的话，可以把这个打包器设置为默认打包器，这个打包器返回replaceable_buffer对象，由于replaceable_buffer对象
保存了一个i_buffer指针，所以只要是实现了i_buffer接口的对象，都能赋予replaceable_buffer，具体请参看replaceable_buffer及i_buffer的定义。
class replaceable_packer : public i_packer<replaceable_buffer>;

带固定头和固定尾的打包器，头可以为空，尾不能为空。
class prefix_suffix_packer : public i_packer<std::string>;

注意，没有固定长度的打包器（固定长度的解包器有），固定长度的打包器实际意义不大，因为它实际并没有协议相关的东西在包里面，所以每次发送
必须已经是一个完整的包，直接发送即可（st_socket::direct_send_msg，st_socket::direct_post_msg）。

} //namespace

