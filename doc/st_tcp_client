
namespace st_asio_wrapper
{

typedef st_sclient<st_connector> st_tcp_sclient;
一个只支持一条连接的tcp客户端

支持多条连接的tcp客户端
template<typename Socket = st_connector>
class st_tcp_client_base : public st_client<Socket>
{
public:
	st_tcp_client_base(st_service_pump& service_pump_);

	bool broadcast_msg(const char* pstr, size_t len, bool can_overflow = false);
	bool broadcast_msg(const std::string& str, bool can_overflow = false);
	bool broadcast_msg(const char* const pstr[], const size_t len[], size_t num, bool can_overflow = false);
	bool broadcast_native_msg(const char* pstr, size_t len, bool can_overflow = false);
	bool broadcast_native_msg(const std::string& str, bool can_overflow = false);
	bool broadcast_native_msg(const char* const pstr[], const size_t len[], size_t num, bool can_overflow = false);
	bool safe_broadcast_msg(const char* pstr, size_t len, bool can_overflow = false);
	bool safe_broadcast_msg(const std::string& str, bool can_overflow = false);
	bool safe_broadcast_msg(const char* const pstr[], const size_t len[], size_t num, bool can_overflow = false);
	bool safe_broadcast_native_msg(const char* pstr, size_t len, bool can_overflow = false);
	bool safe_broadcast_native_msg(const std::string& str, bool can_overflow = false);
	bool safe_broadcast_native_msg(const char* const pstr[], const size_t len[], size_t num, bool can_overflow = false);
对每一个连接调用st_tcp_socket中的同名函数。

protected:
	virtual void uninit();
实现i_service的纯虚接口，由st_service_pump调用。
};
typedef st_tcp_client_base<> st_tcp_client;

} //namespace

