
namespace st_asio_wrapper
{

仅支持一条连接的tcp客户端
template<typename Socket> using st_tcp_sclient_base = st_sclient<Socket>;

支持多条连接的tcp客户端
template<typename Socket, typename Pool = st_object_pool<Socket>>
class st_tcp_client_base : public st_client<Socket, Pool>
{
public:
	st_tcp_client_base(st_service_pump& service_pump_);

	template<typename Arg>
	st_tcp_client_base(st_service_pump& service_pump_, Arg arg);
ssl使用。

	size_t valid_size();
有效（已连接）的连接数量。

	using st_client<Socket, Pool>::add_socket;
	typename Pool::object_type add_socket();
创建或者重用一个对象，然后以reset为true调用父类的add_socket。注意未设地址，将使用SERVER_IP和SERVER_PORT
作为服务端地址，如果你要用别的地址，请用下面那个add_client。

	typename Pool::object_type add_socket(unsigned short port, const std::string& ip = std::string());
创建或者重用一个对象，设置服务端地址，然后以reset为true调用父类的add_client。

	void broadcast_msg(const std::string& str, bool can_overflow = false);
	void broadcast_msg(const char* pstr, size_t len, bool can_overflow = false);
	void broadcast_msg(const char* const pstr[], const size_t len[], size_t num, bool can_overflow = false);

	void broadcast_native_msg(const std::string& str, bool can_overflow = false);
	void broadcast_native_msg(const char* pstr, size_t len, bool can_overflow = false);
	void broadcast_native_msg(const char* const pstr[], const size_t len[], size_t num, bool can_overflow = false);

	void safe_broadcast_msg(const std::string& str, bool can_overflow = false);
	void safe_broadcast_msg(const char* pstr, size_t len, bool can_overflow = false);
	void safe_broadcast_msg(const char* const pstr[], const size_t len[], size_t num, bool can_overflow = false);

	void safe_broadcast_native_msg(const std::string& str, bool can_overflow = false);
	void safe_broadcast_native_msg(const char* pstr, size_t len, bool can_overflow = false);
	void safe_broadcast_native_msg(const char* const pstr[], const size_t len[], size_t num, bool can_overflow = false);

	void sync_broadcast_msg(const std::string& str, bool can_overflow = false);
	void sync_broadcast_msg(const char* pstr, size_t len, bool can_overflow = false);
	void sync_broadcast_msg(const char* const pstr[], const size_t len[], size_t num, bool can_overflow = false);

	void sync_broadcast_native_msg(const std::string& str, bool can_overflow = false);
	void sync_broadcast_native_msg(const char* pstr, size_t len, bool can_overflow = false);
	void sync_broadcast_native_msg(const char* const pstr[], const size_t len[], size_t num, bool can_overflow = false);
对每一个连接调用st_tcp_socket中的同名函数。

	void disconnect(typename Pool::object_ctype& client_ptr);
	void disconnect(bool reconnect = false);
	void force_shutdown(typename Pool::object_ctype& client_ptr);
	void force_shutdown(bool reconnect = false);
	void graceful_shutdown(typename Pool::object_ctype& client_ptr, bool sync = true);
	void graceful_shutdown(bool reconnect = false, bool sync = true);
先从对象池中删除client_ptr，然后以默认参数调用client_ptr的同名函数。对于没有client_ptr参数的重载，不删除任何对象并对所有对象调用同名函数，参数直接传递。

protected:
	virtual void uninit();
实现i_service的纯虚接口，由st_service_pump在stop_service时调用，跟st_sclient::uninit功能一样，只是对所有客户端都做一个“结束”操作。
};

} //namespace
