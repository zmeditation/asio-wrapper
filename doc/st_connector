
#ifndef SERVER_IP
#define SERVER_IP				"127.0.0.1"
#endif
#ifndef SERVER_PORT
#define SERVER_PORT				5050
#endif
#ifndef RE_CONNECT_INTERVAL
#define RE_CONNECT_INTERVAL		500 //millisecond(s)
异步连接，asio返回失败之后，暂停一定时间继续重试（即再次调用asnc_connect）。
#endif

namespace st_asio_wrapper
{

带连接功能的st_tcp_socket，算是一个真正的客户端了
template <typename Packer = DEFAULT_PACKER, typename Unpacker = DEFAULT_UNPACKER, typename Socket = boost::asio::ip::tcp::socket>

class st_connector_base : public st_tcp_socket_base<Socket, Packer, Unpacker>
{
public:
	st_connector_base(boost::asio::io_service& io_service_);

	template<typename Arg>
	st_connector_base(boost::asio::io_service& io_service_, Arg& arg);
ssl使用。

public:
	virtual void reset();
重置所有，st_object_pool在重用时会调用。st_connector的子类可重写它以重置自己的状态，记得最后需要调用本类的reset。

	virtual bool obsoleted();
在调用父类同名函数的基础上，增加了对是否重连接的判断，如果需要重连接则返回假。

	void set_server_addr(unsigned short port, const std::string& ip);
设置服务端地址用于连接之用，需要在do_start之前被调用。

	bool is_connected() const;
是否已经连接成功。

	void disconnect(bool reconnect = false);
直接调用force_close。

	void force_close(bool reconnect = false);
强制退出————调用父类的clean_up，更新自己的状态（比如已连接状态等），如果reconnect为true，则关闭之后，马上重新连接服务器。

	void graceful_close(bool reconnect = false, bool sync = true);
优雅关闭，重置一些自己的状态之后，调用父类的graceful_close函数，reconnect参数的意义同上，sync参数直接传递给父类。

	void show_info(const char* head, const char* tail) const;
在head和tail中间，显示自己的地址（IP加端口）。

	void show_info(const char* head, const char* tail, const boost::system::error_code& ec) const;
同上，但加上了显示ec.message.data()的内容。
	
protected:
	virtual bool do_start();
开始，这里开始的意义是，如果连接未成功，则开始连接服务器，如果连接已经成功，则开始接收数据。

virtual int prepare_reconnect(const boost::system::error_code& ec);
	连接失败时回调，返回大于等于零则继续在相应毫秒之后重试，返回负数则放弃。

	virtual void on_connect();
连接成功时回调，用户重写它以得到连接成功事件。

	virtual bool is_send_allowed() const;
是否可发送数据，is_connected加上父类的is_send_allowed为最终的判定结果。

	virtual void on_unpack_error();
解包错误，默认的行为是关闭连接，可以重写以自定义行为。

	virtual void on_recv_error(const error_code& ec);
接收错误，默认的行为是关闭连接，可以重写以自定义行为。

	bool prepare_next_reconnect(const boost::system::error_code& ec);
如果允许（io_service仍然在运行且prepare_reconnect返回大于等于0），启动定时器以延时一小段时间之后重新连接服务器。

private:
	bool async_close_handler(unsigned char id, ssize_t loop_num);
异步优雅关闭超时定时器。

	void connect_handler(const error_code& ec);
连接成功或者失败后由asio回调。

protected:
	boost::asio::ip::tcp::endpoint server_addr;
服务器地址。
	bool connected;
是否已经连接成功。
	bool reconnecting;
是否正在重新连接。
};
typedef st_connector_base<> st_connector;

} //namespace
