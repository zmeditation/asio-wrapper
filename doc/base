
包括了公共函数、类、接口等。

1. 接口
i_server:
用于在server_socket_base中调用server_base，server_socket_base使用，server_base实现，
如果想增加更多的功能，则继承自i_server实现自己的接口，继承自server_base并实现这个新接口，最后继承自server_socket_base以使用这个新接口。
这里只解释一下del_socket和restore_socket接口：
关闭一个连接时，server_socket_base调用这个方法，i_server的实现者（server就是一个i_server的实现者）一般来说应该把这个连接从自己的
客户端对象池里面删除，调用这个方法的最佳时期是在on_recv_error里面。
注意，socket_ptr参数看起来是一个object，其实它的类型是server_base中的Socket模板参数，用object完全是为了不让i_server带一个类似于
Socket的模板参数，带上之后会有模板参数的循环依赖的问题，如果哪位同仁可以解决此问题，麻烦告诉我一声。
i_server的实现者在使用socket_ptr参数之前，会转换成Socket类型指针，请看server_base的实现。
restore_socket接口:
当connector在断开后重新连接上服务器之后，在服务端必须会得到一个全新的server_socket_base，我们可以直接把之前的server_socket_base直接恢复到
这个新的server_socket_base之中（其它了SOCKET句柄不一样之外，其它都一样），并且保持id不变。为此你需要定义ST_ASIO_RESTORE_OBJECT宏，这个
宏的意思跟ST_ASIO_REUSE_OBJECT类似，只是不会在创建server_socket_base是重用，而是在调用restore_socket时重用，那么第二个server_socket_base如何
知道第一个server_socket_base是哪一个呢？答案是这个功能需要客户端支持，客户端需要在重连接成功之后，发送必要的数据以便让server_socket_base知道其
前身的id，然后从前身恢复。注意，恢复的过程也需要你去实现，方法是重写server_socket_base::take_over。

i_buffer：
如果想要在运行时替换打包解包器，你的缓存必须实现这个接口，然后以auto_buffer或者shared_buffer作为消息类型。

i_packer：
所有打包器必须实现这个接口，tcp和udp共用。每次发送消息的时候，只要不是直接发送的消息，都会调用pack_msg来打包。

i_unpacker:
tcp解包器必须实现这个接口。每次开始接收消息之后，会调用prepare_next_recv以得到一个缓存，当收到一些数据之后，asio会调用completion_condition，
如果返回0，说明已经成功的接收到了至少一个消息，于是st_asio_wrapper会接着调用parse_msg来解析消息，解析完了之后再次调用prepare_next_recv进入一个新的循环。
注意，解析完消息之后，缓存里面可能还剩余部分数据（消息被分包），第二次prepare_next_recv返回的缓存，不能覆盖未解析完的数据（如果采用固定缓存的解包器，通常的做法
是把未解析完的数据移动到缓存最前面），否则数据会被覆盖。如果定义了ST_ASIO_SCATTERED_RECV_BUFFER宏，则解包器支持scatter-gather缓存，即一次提供多个不连续的
缓存用于接收消息，如果你使用了ring buffer，相信你知道我在说什么。

i_udp_unpacker:
udp解包器必须实现这个接口。

2. 类
st_atomic:
boost::atomic的代替品，因为boost::atomic在boost 1.53版本中才引入，而st_asio_wrapper库最低支持boost 1.49，注意它是通过boost::shared_mutex
来实现线程安全的，效率不如原子操作高。

scope_atomic_lock：
功能与boost::scope_lock一致，只是它是lock-free的，用原子操作代替了mutex操作（如果用st_aotmic则除外）。

dummy_packer:
仅仅提供发送消息的类型以便通过编译，无法真正的打包，所以只能通过direct_send_msg等发送消息。

auto_buffer：
如果想要运行时替换打包解包器，则打包解包器必须以auto_buffer或者shared_buffer作为消息类型（你写个类似的也可，但没有必要，如果需要更多的功能可以用继承）。
这个类是不允许被复制的，用户只负责分配内存。

shared_buffer：
同auto_buffer，除了允许被复制（表面上的被复制，不是深度复制，我们要尽量避免深度复制，std::string就深度复制）。

dummy_packer：
这个类只提供消息类型的定义，不做真正的打包，所以用户必须以native方式发送消息，或者用direct_send_msg等发送消息。

udp_msg：
udp消息，其实就是在tcp消息上加了一个对端地址。

statistic：
性能统计，如果定义了ASCS_FULL_STATISTIC，则统计数量和时间（对性能有些影响），否则只统计数量。

消息发送相关的统计
uint_fast64_t send_msg_sum; 成功发送到asio的消息条数
uint_fast64_t send_byte_sum; 成功发送到asio的消息总字节数
stat_duration send_delay_sum; 从消息发送（send_(native_)msg，不包括打包时间）到真正发送（asio::async_write）的延迟时间
stat_duration send_time_sum; 从真正的消息发送（asio::async_write）到发送完成（发送到SOCKET缓存），这一项体现了你的网络吞吐率，注意吞吐率低不代表是你的问题，也有可能是接收方慢了。

消息接收相关统计
uint_fast64_t recv_msg_sum; 收到的消息条数
uint_fast64_t recv_byte_sum; 收到的消息总字节数
stat_duration dispatch_dealy_sum; 从消息解包完成之后，到on_msg_handle的时间延迟，如果这项偏大，可能是因为service线程总不够用
stat_duration recv_idle_sum; 暂停消息接收的总时间，在接收缓存满，消息派发被暂停或者拥塞控制时，都将会暂停消息接收。
#ifndef ST_ASIO_FORCE_TO_USE_MSG_RECV_BUFFER
stat_duration handle_time_1_sum; 调用on_msg花费的总时间
#endif
stat_duration handle_time_2_sum; 调用on_msg_handle花费的总时间

obj_with_begin_time：
可包装任何对象，并且加上一个时间（用于时间统计）。

log_formater：
log打印函数，只是打印到屏幕，如果需要更详细的功能需要自己实现。

unified_out：
调用log_formater打印log，如果定义ASCS_NO_UNIFIED_OUT，所有log打印函数将变成空函数，什么也不做。

3. 函数
do_something_to_all：
对容器（不得是类map容器，比如map，unordered_map等）中的所有对象执行一个动作，动作由一个函数对象（std::function）决定。
可以选择带锁和不带锁，如果带锁，加的是共享锁，请注意。

do_something_to_one：
同do_something_to_all，如果对某一个对象执行的动作返回true，则跳过所有剩下的对象，如果全部对象都返回false，则等于do_something_to_all，但效率上稍慢。
