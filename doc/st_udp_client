
namespace st_asio_wrapper
{

支持多个套接字的udp服务
template<typename Socket, typename Pool = st_object_pool<Socket>>
class st_udp_client_base : public st_client<Socke, Pool>
{
public:
	st_udp_client_base(st_service_pump& service_pump_);

	using st_client<Socket, Pool>::add_client;
	typename Pool::object_type add_client(unsigned short port, const std::string& ip = std::string());
创建或者重用一个对象，然后以reset为true调用父类的同名函数。

	void disconnect(typename Pool::object_ctype& client_ptr);
	void disconnect();
	void force_shutdown(typename Pool::object_ctype& client_ptr);
	void force_shutdown();
	void graceful_shutdown(typename Pool::object_ctype& client_ptr);
	void graceful_shutdown();
先从对象池中删除client_ptr，然后调用client_ptr的同名函数。对于没有client_ptr参数的重载，对所有对象调用同名函数。

protected:
	virtual void uninit();
实现i_service的纯虚接口，由st_service_pump在stop_service时调用，跟st_sclient::uninit功能一样，只是对所有客户端都做一个“结束”操作。
};

} //namespace
