
#ifdef ASCS_HUGE_MSG
#define ASCS_HEAD_TYPE	uint32_t
#define ASCS_HEAD_N2H	ntohl
#else
#define ASCS_HEAD_TYPE	uint16_t
#define ASCS_HEAD_N2H	ntohs
#endif
#define ASCS_HEAD_LEN	(sizeof(ASCS_HEAD_TYPE))

namespace st_asio_wrapper { namespace ext {

默认的解包器，如果你需要的消息格式与默认解包器的消息格式不相同，那么显然的，你需要实现自己的解包器；
默认解包器的消息格式是：长度（２字节）＋　消息内容，所以其支持的消息长度为1至(65535-2)，如果想突破这个限制，
请参看i_packer。
class unpacker : public i_unpacker<std::string>;

默认的udp解包器，长度限制同packer。
class udp_unpacker : public i_udp_unpacker<std::string>;

作用参看replaceable_packer。
template<typename T = replaceable_buffer>
class replaceable_unpacker : public i_unpacker<T>;
template<typename T = replaceable_buffer>
class replaceable_udp_unpacker : public i_udp_unpacker<T>;

这个解包器与unpacker的不同之处在于，它不需要一个固定大小的缓存，而是先接收包头，再根据包头得到消息的长度信息，
然后分配（new）适当的缓存，这样当缓存写满了之后，一个完整的消息就接收完毕了，所以省掉了消息的拷贝；但也有一个坏处，
就是每次只能接收一个消息，每个消息需要调用parse_msg两次。
如果你的消息很小很频繁，经常粘包，那么用unpacker效率更高，因为它一次可以接收多个包，但non_copy_unpacker还有一个
好处是unpacker无法给予的，那就是，如果你的消息长短非常不齐，比如消息大部分是1K，而很少的哪怕只有一个消息长1M，
那么所有的unpacker不得不分配一个至少1M的缓存用于接收消息，造成了内存的巨大浪费。
class non_copy_unpacker : public i_unpacker<basic_buffer>;

这两个消息不解释，注意没有返回replaceable_buffer的fixed_length_unpacker和prefix_suffix_unpacker，可参考
replaceable_unpacker自行实现。
class fixed_length_unpacker : public i_unpacker<basic_buffer>;
class prefix_suffix_unpacker : public i_unpacker<std::string>;

class stream_unpacker : public tcp::i_unpacker<std::string>;
无协议解包器，收到什么就是什么，类似于调试助手。

}} //namespace

