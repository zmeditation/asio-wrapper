
#ifndef ST_SERVICE_THREAD_NUM
#define ST_SERVICE_THREAD_NUM 8
同时开启多少个线程执行boost::asio::io_service::run函数。
#endif

namespace st_asio_wrapper
{

对io_service的包装，用于启动st_asio_wrapper里面的service（实现了i_service的所有对象）。
class st_service_pump : public boost::asio::io_service
{
public:
	class i_service
	{
	protected:
		i_service(st_service_pump& service_pump_);
		virtual ~i_service();

	public:
		void start_service();
启动service（调用init），如果service已经启动，则调用没有任何作用。
		void stop_service();
停止service（调用uninit），如果service已经停止，则调用没有任何作用。
		bool is_started() const;
判断service是否已经启动。

		void id(int id);
		int id() const;
设置／获取service的id，用不用id或者怎么使用id，由使用者决定，st_asio_wrapper目前未使用service id，
如果你需要查找service，则最好启用它。

		void user_data(void* data_);
		void* user_data() const;
用户数据，用不用或者怎么使用请发挥想象，st_asio_wrapper库本身并不使用这个值，也不管理其生命周期。

		st_service_pump& get_service_pump();
		const st_service_pump& get_service_pump() const;
获取st_service_pump对象。

	protected:
		virtual void init() = 0;
		virtual void uninit() = 0;
继承者实现，在启动／停止service的时候，st_service_pump会调用。

	protected:
		st_service_pump& service_pump;

	private:
		bool started;
		int id_;
		void* data;
	};

public:
	typedef i_service* object_type;
	typedef const object_type object_ctype;
	typedef boost::container::list<object_type> container_type;

	st_service_pump();

	i_service* find(int id);
根据id查找service。

	void remove(object_type i_service_);
	void remove(int id);
删除指定的service（调用stop_and_free）。

	void clear();
删除所有service（调用stop_and_free）。

	void start_service(int thread_num = ST_SERVICE_THREAD_NUM);
	void stop_service();
启动／停止service（调用end_service），thread_num是线程数量（用于调用io_service::run）。

	void start_service(object_type i_service_, int thread_num = ST_SERVICE_THREAD_NUM);
	void stop_service(object_type i_service_);
如果某个service是在前面那个start_service之后才添加的，则调用这个启动它，否则功能完全同前面那个start_service，这也是为什么带了
thread_num这个看似无关的参数。
stop_service停止指定的service，跟前面的stop_service一样，差别仅是前面的停止所有service。

	void run_service(int thread_num = ST_SERVICE_THREAD_NUM);
	void end_service();
run_service同start_service，但是会阻塞，直到所有线程（调用io_service::run的线程）都退出，所以end_service必须在另外的线程中调用。
请注意，结束以run_service启动的service pump，必须用end_service，end_service调用之后马上返回，service pump是否结束以run_service
是否返回为准，而不是end_service的返回。

	bool is_running() const;
等效于　!io_service::stopped()

	bool is_service_started() const;
是否已经调用过了start_service(int thread_num)。

	void add_service_thread(int thread_num);
运行时增加service线程，注意只能增加不能减少。

protected:
	void do_service(int thread_num);
真正开启service，其实就是调用每一个service的start_service接口，并开启指定数据的线程来执行run函数。
	void wait_service();
等待do_service创建的所有线程结束。

	void stop_and_free(object_type i_service_);
调用stop_service接口，并传给free函数释放i_service_。

	virtual void free(object_type i_service_);
默认什么也不做，如果你需要，请重写这个函数。

#ifdef ST_ASIO_ENHANCED_STABILITY
	virtual bool on_exception(const std::exception& e);
如果io_service::run抛出异常，则会调用这个函数，如果返回真，则忽略异常再次调用io_service::run。
	size_t run(boost::system::error_code& ec);
调用io_service::run，并在外面包一层try catch。
#endif

	template<typename _Predicate> void do_something_to_all(const _Predicate& __pred);
	template<typename _Predicate> void do_something_to_one(const _Predicate& __pred);
与st_timer的同名函数类似。

private:
	void add(object_type i_service_);
添加一个service，由i_service使用。

protected:
	container_type service_can;
	boost::shared_mutex service_can_mutex;
	boost::thread_group service_threads;
	bool started;
};

} //namespace


