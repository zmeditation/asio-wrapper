
namespace st_asio_wrapper
{
namespace st_tcp
{

tcp套接字类，实现tcp数据的收发
template <typename Socket, typename Packer, typename Unpacker>
class st_tcp_socket_base : public st_socket<Socket, Packer, Unpacker>
{
public:
	typedef typename Packer::msg_type in_msg_type;
	typedef typename Packer::msg_ctype in_msg_ctype;
	typedef typename Unpacker::msg_type out_msg_type;
	typedef typename Unpacker::msg_ctype out_msg_ctype;

protected:
	st_tcp_socket(boost::asio::io_service& io_service_);

	template<typename Arg>
	st_tcp_socket(boost::asio::io_service& io_service_, Arg& arg);
ssl使用。

public:
	virtual bool obsoleted();
在调用父类同名函数的基础上，增加了对是否正在关闭连接的判断，如果是，则返回假。

	void reset();
重置所有（reset_state加clear_buffer，后者由父类实现）。

	void reset_state();
重载父类同名函数，重置自己的状态之后，调用父类同名函数。

	bool is_closing() const;
是否正在优雅关闭套接字，此时不再发送消息（如果发送会出错，因为已经关闭了自己的数据发送），但继续接收消息。

	boost::shared_ptr<i_unpacker<out_msg_type>> inner_unpacker();
	boost::shared_ptr<const i_unpacker<out_msg_type>> inner_unpacker() const;
	void inner_unpacker(const boost::shared_ptr<i_unpacker<out_msg_type>>& _unpacker_);
获取／修改解包器。
注意，运行时修改解包器是非线程安全的，而且只能在构造函数、子类的reset函数（虚的那个）和on_msg里面修改。不支持多线程一是为了
效率，二是支持了也必须要在前面说的那三个地方修改，而这三个地方不会有多线程问题，三是这个功能用得很少。

	using st_socket<Socket, Packer, Unpacker>::send_msg;

	bool send_msg(const std::string& str, bool can_overflow = false);
	bool send_msg(const char* pstr, size_t len, bool can_overflow = false);
	bool send_msg(const char* const pstr[], const size_t len[], size_t num, bool can_overflow = false);
发送消息，前两个是helper函数，最后一个才是真正的发送消息（放入消息发送缓存）；第一个调用第二个，第二个调用第三个。

	bool send_native_msg(const char* pstr, size_t len, bool can_overflow = false);
	bool send_native_msg(const std::string& str, bool can_overflow = false);
	bool send_native_msg(const char* const pstr[], const size_t len[], size_t num, bool can_overflow = false);
同上，只是以native为true调用i_packer::pack_msg接口。

	bool safe_send_msg(const char* pstr, size_t len, bool can_overflow = false);
	bool safe_send_msg(const std::string& str, bool can_overflow = false);
	bool safe_send_msg(const char* const pstr[], const size_t len[], size_t num, bool can_overflow = false);
同send_msg，只是在消息发送缓存溢出的时候会等待直到缓存可用；如果is_send_allowed返回false或者io_service已经停止，则马上放弃等待返回失败。
safe系列函数，在on_msg和om_msg_handle里面调用时需要特别谨慎，因为它会阻塞service线程。

	bool safe_send_native_msg(const char* pstr, size_t len, bool can_overflow = false);
	bool safe_send_native_msg(const std::string& str, bool can_overflow = false);
	bool safe_send_native_msg(const char* const pstr[], const size_t len[], size_t num, bool can_overflow = false);
同上，只是以native为true调用i_packer::pack_msg接口。

	bool post_msg(const char* pstr, size_t len, bool can_overflow = false);
	bool post_msg(const std::string& str, bool can_overflow = false);
	bool post_msg(const char* const pstr[], const size_t len[], size_t num, bool can_overflow = false);
同send_msg，只是它永远能马上成功。
注意：如果消息发送缓存溢出了（当然can_overflow得为false，否则不检测缓存是否溢出），则暂停消息派发（进而也会停止消息接收，
因为不派发只接收消息，迟早会让消息接收缓存满而暂停消息接收，如果不使用消息接收缓存，则马上暂停消息接收）。
post_msg和send_msg的区别请看st_socket里面的post_msg_buffer和send_msg_buffer。

	bool post_native_msg(const char* pstr, size_t len, bool can_overflow = false);
	bool post_native_msg(const std::string& str, bool can_overflow = false);
	bool post_native_msg(const char* const pstr[], const size_t len[], size_t num, bool can_overflow = false);
同上，只是以native为true调用i_packer::pack_msg接口。

protected:
	void force_close();
	void graceful_close(bool sync = true);
前两个函数功能完全一样（为了完整性而提供了它们），都是直接调用clean_up。
第三个函数优雅关闭套接字，所谓优雅关闭，就是先关闭自己的数据发送，然后接收完遗留数据之后，才完全关闭套接字。当sync为假时，graceful_close马上返回，
优雅关闭将在后台继承进行，当回调到on_recv_error的时候，关闭结束（有可能优雅关闭成功，有可能超时被强制关闭）。

	virtual bool do_send_msg();
马上开始消息发送，重写自st_socket的do_send_msg，由st_socket调用。

	virtual bool is_send_allowed() const;
重写st_socket的is_send_allowed，记住，自己的判断（is_closing）加上st_socket的判断，才是最终结果。

	virtual void on_unpack_error() = 0;
解包出错时回调。

#ifndef FORCE_TO_USE_MSG_RECV_BUFFER
	virtual bool on_msg(out_msg_type& msg);
重写st_socket的on_msg，功能是打印消息到控制台，使用者重写这个函数以处理消息。
#endif

	virtual bool on_msg_handle(msg_type& msg, bool link_down);
重写st_socket的on_msg_handle，功能是打印消息到控制台，使用者重写这个函数以处理消息。

	void do_recv_msg();
马上开始接收数据，由子类调用，因为st_tcp_socket不知道什么时候可以接收数据（比如是否连接成功等）。

	void clean_up();
关闭套接字，停止所有定时器，直接派发所有剩余消息，重置所有状态（调用reset_state）。

	void recv_handler(const error_code& ec, size_t bytes_transferred);
收到数据时后asio回调。

	void send_handler(const error_code& ec, size_t bytes_transferred);
成功发送消息（写入底层套接字）后由asio回调。

protected:
	boost::shared_ptr<i_unpacker<out_msg_type>> unpacker_;
	int close_state; //2-the first step of graceful close, 1-force close, 0-normal state
};

} //namespace st_tcp
} //namespace st_asio_wrapper

using namespace st_asio_wrapper::st_tcp;
兼容老版本。
