
#ifdef HUGE_MSG
#define HEAD_TYPE	uint32_t
#define HEAD_N2H	ntohl
#else
#define HEAD_TYPE	uint16_t
#define HEAD_N2H	ntohs
#endif
#define HEAD_LEN	(sizeof(HEAD_TYPE))

namespace st_asio_wrapper
{

解包器接口
template<typename MsgType>
class i_unpacker
{
public:
	virtual void reset_unpacker_state() = 0;
重置解包器状态。
	virtual bool parse_msg(size_t bytes_transferred, container::list<MsgType>& msg_can) = 0;
st_socket收到适当数据之后（completion_condition返回0）会调用本接口，以便让unpacker尝试解析消息，
成功解析出来的消息通过msg_can返回。
	virtual size_t completion_condition(const error_code& ec, size_t bytes_transferred) = 0;
用于在数据接收过程中，判断是否一个完整的消息已经收到（那就可以解析了），这个函数直接由asio使用。
请小心设计你的协议和解包器，否则可能性能瓶颈就会出现在它们之上，推荐的协议格式是：长度＋数据。
推荐的completion_condition的实现就是默认的unpacker的实现，大家可以看一下，有疑问可以来问我。
	virtual mutable_buffers_1 prepare_next_recv() = 0;
每次调用parse_msg之后，会接着调用prepare_next_recv，以得到一个可用的buffer供下次接收数据使用。
};


默认的解包器，如果你需要的消息格式与默认解包器的消息格式不相同，那么显然的，你需要实现自己的解包器；
默认解包器的消息格式是：长度（２字节）＋　消息内容，所以其支持的消息长度为1至(65535-2)。
class unpacker : public i_unpacker<std::string>;

} //namespace

