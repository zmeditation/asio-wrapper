
#ifdef HUGE_MSG
#define HEAD_TYPE	uint32_t
#define HEAD_N2H	ntohl
#else
#define HEAD_TYPE	uint16_t
#define HEAD_N2H	ntohs
#endif
#define HEAD_LEN	(sizeof(HEAD_TYPE))

namespace st_asio_wrapper
{

解包器接口
template<typename MsgType>
class i_unpacker
{
public:
	typedef MsgType msg_type;
	typedef const msg_type msg_ctype;
	typedef boost::container::list<msg_type> container_type;

protected:
	virtual ~i_unpacker() {}

public:
	virtual void reset_unpacker_state() = 0;
重置解包器状态。
	virtual bool parse_msg(size_t bytes_transferred, container_type& msg_can) = 0;
st_tcp_socket收到适当数据之后（completion_condition返回0）会调用本接口，以便让unpacker尝试解析消息，
成功解析出来的消息通过msg_can返回。
	virtual size_t completion_condition(const error_code& ec, size_t bytes_transferred) = 0;
用于在数据接收过程中，判断是否一个完整的消息已经收到（那就可以解析了），这个函数直接由asio使用。
请小心设计你的协议和解包器，否则可能性能瓶颈就会出现在它们之上，推荐的协议格式是：长度＋数据。
推荐的completion_condition的实现就是默认的unpacker的实现，大家可以看一下，有疑问可以来问我。
	virtual mutable_buffers_1 prepare_next_recv() = 0;
每次发起异步读（async_read）之前，会调用prepare_next_recv，以得到一个可用的buffer供接收数据使用。
};

udp消息格式，其实就在普通消息的基础上加了一个对端ip，这也是为什么没有udp_packer类的原因，我们可以
用packer打包然后生成一个udp_msg即可。
template<typename MsgType>
class udp_msg : public MsgType
{
public:
	boost::asio::ip::udp::endpoint peer_addr;
对端地址。

	udp_msg() {}
	udp_msg(const boost::asio::ip::udp::endpoint& _peer_addr, MsgType&& msg) : MsgType(std::move(msg)), peer_addr(_peer_addr) {}

	void swap(udp_msg& other) {std::swap(peer_addr, other.peer_addr); MsgType::swap(other);}
	void swap(boost::asio::ip::udp::endpoint& addr, MsgType&& tmp_msg) {std::swap(peer_addr, addr); MsgType::swap(tmp_msg);}
};

template<typename MsgType>
class i_udp_unpacker
{
public:
	typedef MsgType msg_type;
	typedef const msg_type msg_ctype;
	typedef boost::container::list<udp_msg<msg_type>> container_type;

protected:
	virtual ~i_udp_unpacker() {}

public:
	virtual msg_type parse_msg(size_t bytes_transferred) = 0;

解包器，对于udp来说，一次接收就是一个包，所以总是返回一个包，不存在粘包问题。
	virtual boost::asio::mutable_buffers_1 prepare_next_recv() = 0;

返回一个asio需要的buffer，具体参看i_unpacker。
};

默认的解包器，如果你需要的消息格式与默认解包器的消息格式不相同，那么显然的，你需要实现自己的解包器；
默认解包器的消息格式是：长度（２字节）＋　消息内容，所以其支持的消息长度为1至(65535-2)，如果想突破这个限制，
请参看i_packer。
class unpacker : public i_unpacker<std::string>;

默认的udp解包器，长度限制同packer。
class udp_unpacker : public i_udp_unpacker<std::string>;

作用参看replaceable_packer。
class replaceable_unpacker : public i_unpacker<replaceable_buffer>, public unpacker;
class replaceable_udp_unpacker : public i_udp_unpacker<replaceable_buffer>;

这个解包器与unpacker的不同之处在于，它不需要一个固定大小的缓存，而是先接收包头，再根据包头得到消息的长度信息，
然后分配（new）适当的缓存，这样当缓存写满了之后，一个完整的消息就接收完毕了，所以省掉了消息的拷贝；但也有一个坏处，
就是每次只能接收一个消息，每个消息需要调用parse_msg两次。
如果你的消息很小很频繁，经常粘包，那么用unpacker效率更高，因为它一次可以接收多个包，但unbuffered_unpacker还有一个
好处是unpacker无法给予的，那就是，如果你的消息长短非常不齐，比如消息大部分是1K，而很少的哪怕只有一个消息长1M，
那么所有的unpacker不得不分配一个至少1M的缓存用于接收消息，造成了内存的巨大浪费。
class unbuffered_unpacker : public i_unpacker<inflexible_buffer>;

这两个消息不解释，注意没有返回replaceable_buffer的fixed_length_unpacker和prefix_suffix_unpacker，可参考
replaceable_unpacker自行实现。
class fixed_length_unpacker : public i_unpacker<std::string>;
class prefix_suffix_unpacker : public i_unpacker<std::string>;

} //namespace

