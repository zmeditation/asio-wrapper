性能测试环境搭建：
开启asio_server这个demo，当成性能测试服务端，注意asio_server里面演示了两种服务器，一种是普通服务器，一种是echo
服务器，它们会同时启动（端口不一样），asio_client将连接普通服务器，test_client将连接echo服务器；
开启test_client，当成性能测试客户端；测试结果由test_client来提供并显示；

test_client的运行格式是：
test_client link_num
其中link_num是连接数量，最小1，最大4096，这个连接数量与系统配置有关，比如ubuntu，可以通过ulimit修改，
如果运行test_client不输入参数，则相当于：test_client 16。
当所有连接都建立起来之后，输入参数：
消息数 消息长度 填充（字符）模式（0广播 1随机）
比如 100000 1024 0，意思是，每条连接发送10万条消息，每条消息长度（不得小于sizeof(size_t)）1024，消息内容是字符0。
关于消息内容，再说一句，其实它最前面有sizeof(size_t)个字符是一个序号，用于检测数据的合法性，也就是说这个虽然是性能
测试，也附带测试了一下数据的正确性。sizeof(size_t)个字符之后才是前面说的填充字符，大家一看源代码就明白了。
如果模式为0，则对所有连接都发送“消息数”个消息，总共发送“连接数*消息数”个消息；
如果模式为1，则总共只发送“消息数”个消息，每个消息都随机的选择一个连接来发送。
除“消息数”之外，其它参数可省略，默认值以次是：1024 0 0
测试结束之后，可再次输入命令，再一次测试。
测试之前，可输入+/-number来增减连接，比如输入“+16”，则增加16条连接。

消息具体流程：
客户端发送数据到服务端，服务端再把数据返回回去，当所有连接的所有数据都发送完毕，并且所有数据也接收完毕，则测试结束；
服务端在这个过程中不会做任何投机取巧的事，比如把收到的数据不解包就直接发送，这样可以省去解包和打包，
相反，它会按照正规流程来做（这才是实际使用中的情形），即对收到的数据解包，再打包发送回去。

测试报告：
包括总耗时（精确到秒，所以一定要多发点数据，否则都显示为0）和流量，其中流量只计算了单边流量，所以要乘以2才是总流量。
注：所有连接上的消息发送，都在主线程中进行，所以修改一个test_client，适当的增加一些线程来发送数据，应该效率更高。
